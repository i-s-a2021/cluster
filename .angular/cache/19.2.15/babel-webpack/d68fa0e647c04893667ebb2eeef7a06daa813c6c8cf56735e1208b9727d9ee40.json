{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport { BaseService } from './base.service';\nimport * as i0 from \"@angular/core\";\nexport class UserService extends BaseService {\n  getInitialData() {\n    return [{\n      id: '1',\n      name: 'Sarah Johnson',\n      email: 'sarah.johnson@cluster2airports.com',\n      role: 'admin',\n      avatar: 'https://images.pexels.com/photos/3763188/pexels-photo-3763188.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n      createdAt: new Date('2024-01-15'),\n      isActive: true\n    }, {\n      id: '2',\n      name: 'Michael Chen',\n      email: 'michael.chen@cluster2airports.com',\n      role: 'editor',\n      avatar: 'https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n      createdAt: new Date('2024-02-20'),\n      isActive: true\n    }, {\n      id: '3',\n      name: 'Lisa Rodriguez',\n      email: 'lisa.rodriguez@cluster2airports.com',\n      role: 'author',\n      avatar: 'https://images.pexels.com/photos/3756679/pexels-photo-3756679.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n      createdAt: new Date('2024-03-10'),\n      isActive: true\n    }, {\n      id: '4',\n      name: 'David Kim',\n      email: 'david.kim@cluster2airports.com',\n      role: 'author',\n      avatar: 'https://images.pexels.com/photos/3785079/pexels-photo-3785079.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n      createdAt: new Date('2024-04-05'),\n      isActive: true\n    }, {\n      id: '5',\n      name: 'Emma Thompson',\n      email: 'emma.thompson@cluster2airports.com',\n      role: 'author',\n      avatar: 'https://images.pexels.com/photos/3778876/pexels-photo-3778876.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n      createdAt: new Date('2024-05-12'),\n      isActive: true\n    }, {\n      id: '6',\n      name: 'Robert Wilson',\n      email: 'robert.wilson@cluster2airports.com',\n      role: 'editor',\n      avatar: 'https://images.pexels.com/photos/3760263/pexels-photo-3760263.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n      createdAt: new Date('2024-06-18'),\n      isActive: false\n    }];\n  }\n  generateId() {\n    return Math.random().toString(36).substr(2, 9);\n  }\n  getFiltered(filter) {\n    return this.getAll().pipe(map(users => {\n      let filtered = users;\n      if (filter.searchTerm) {\n        const searchLower = filter.searchTerm.toLowerCase();\n        filtered = filtered.filter(user => user.name.toLowerCase().includes(searchLower) || user.email.toLowerCase().includes(searchLower));\n      }\n      if (filter.role) {\n        filtered = filtered.filter(user => user.role === filter.role);\n      }\n      if (filter.isActive !== undefined) {\n        filtered = filtered.filter(user => user.isActive === filter.isActive);\n      }\n      return filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }));\n  }\n  getActiveUsersCount() {\n    return this.getAll().pipe(map(users => users.filter(user => user.isActive).length));\n  }\n  getAdminCount() {\n    return this.getAll().pipe(map(users => users.filter(user => user.role === 'admin').length));\n  }\n  getInactiveCount() {\n    return this.getAll().pipe(map(users => users.filter(user => !user.isActive).length));\n  }\n  toggleUserStatus(id) {\n    return this.getById(id).pipe(switchMap(user => {\n      if (!user) return [null];\n      return this.update(id, {\n        isActive: !user.isActive\n      });\n    }));\n  }\n  static {\n    this.ɵfac = /*@__PURE__*/(() => {\n      let ɵUserService_BaseFactory;\n      return function UserService_Factory(__ngFactoryType__) {\n        return (ɵUserService_BaseFactory || (ɵUserService_BaseFactory = i0.ɵɵgetInheritedFactory(UserService)))(__ngFactoryType__ || UserService);\n      };\n    })();\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","switchMap","BaseService","UserService","getInitialData","id","name","email","role","avatar","createdAt","Date","isActive","generateId","Math","random","toString","substr","getFiltered","filter","getAll","pipe","users","filtered","searchTerm","searchLower","toLowerCase","user","includes","undefined","sort","a","b","getTime","getActiveUsersCount","length","getAdminCount","getInactiveCount","toggleUserStatus","getById","update","__ngFactoryType__","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BaseService } from './base.service';\nimport { User, UserFilter } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService extends BaseService<User> {\n  \n  protected getInitialData(): User[] {\n    return [\n      {\n        id: '1',\n        name: 'Sarah Johnson',\n        email: 'sarah.johnson@cluster2airports.com',\n        role: 'admin',\n        avatar: 'https://images.pexels.com/photos/3763188/pexels-photo-3763188.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n        createdAt: new Date('2024-01-15'),\n        isActive: true\n      },\n      {\n        id: '2',\n        name: 'Michael Chen',\n        email: 'michael.chen@cluster2airports.com',\n        role: 'editor',\n        avatar: 'https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n        createdAt: new Date('2024-02-20'),\n        isActive: true\n      },\n      {\n        id: '3',\n        name: 'Lisa Rodriguez',\n        email: 'lisa.rodriguez@cluster2airports.com',\n        role: 'author',\n        avatar: 'https://images.pexels.com/photos/3756679/pexels-photo-3756679.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n        createdAt: new Date('2024-03-10'),\n        isActive: true\n      },\n      {\n        id: '4',\n        name: 'David Kim',\n        email: 'david.kim@cluster2airports.com',\n        role: 'author',\n        avatar: 'https://images.pexels.com/photos/3785079/pexels-photo-3785079.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n        createdAt: new Date('2024-04-05'),\n        isActive: true\n      },\n      {\n        id: '5',\n        name: 'Emma Thompson',\n        email: 'emma.thompson@cluster2airports.com',\n        role: 'author',\n        avatar: 'https://images.pexels.com/photos/3778876/pexels-photo-3778876.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n        createdAt: new Date('2024-05-12'),\n        isActive: true\n      },\n      {\n        id: '6',\n        name: 'Robert Wilson',\n        email: 'robert.wilson@cluster2airports.com',\n        role: 'editor',\n        avatar: 'https://images.pexels.com/photos/3760263/pexels-photo-3760263.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',\n        createdAt: new Date('2024-06-18'),\n        isActive: false\n      }\n    ];\n  }\n\n  protected generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  getFiltered(filter: UserFilter): Observable<User[]> {\n    return this.getAll().pipe(\n      map(users => {\n        let filtered = users;\n\n        if (filter.searchTerm) {\n          const searchLower = filter.searchTerm.toLowerCase();\n          filtered = filtered.filter(user => \n            user.name.toLowerCase().includes(searchLower) ||\n            user.email.toLowerCase().includes(searchLower)\n          );\n        }\n\n        if (filter.role) {\n          filtered = filtered.filter(user => user.role === filter.role);\n        }\n\n        if (filter.isActive !== undefined) {\n          filtered = filtered.filter(user => user.isActive === filter.isActive);\n        }\n\n        return filtered.sort((a, b) => \n          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n        );\n      })\n    );\n  }\n\n  getActiveUsersCount(): Observable<number> {\n    return this.getAll().pipe(\n      map(users => users.filter(user => user.isActive).length)\n    );\n  }\n\n  getAdminCount(): Observable<number> {\n    return this.getAll().pipe(\n      map(users => users.filter(user => user.role === 'admin').length)\n    );\n  }\n\n  getInactiveCount(): Observable<number> {\n    return this.getAll().pipe(\n      map(users => users.filter(user => !user.isActive).length)\n    );\n  }\n\n  toggleUserStatus(id: string): Observable<User | null> {\n    return this.getById(id).pipe(\n      switchMap(user => {\n        if (!user) return [null];\n        return this.update(id, { isActive: !user.isActive });\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}