{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseService } from './base.service';\nimport * as i0 from \"@angular/core\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService extends BaseService {\n    getInitialData() {\n      return [{\n        id: '1',\n        name: 'Alice Smith',\n        email: 'alice@example.com',\n        password: 'password',\n        image: '',\n        roles: ['admin'],\n        isActive: true,\n        createdAt: new Date('2023-01-01'),\n        updatedAt: new Date('2023-01-01')\n      }, {\n        id: '2',\n        name: 'Bob Johnson',\n        email: 'bob@example.com',\n        password: 'password',\n        image: '',\n        roles: ['editor'],\n        isActive: true,\n        createdAt: new Date('2023-01-02'),\n        updatedAt: new Date('2023-01-02')\n      }, {\n        id: '3',\n        name: 'Carol Lee',\n        email: 'carol@example.com',\n        password: 'password',\n        image: '',\n        roles: ['author'],\n        isActive: false,\n        createdAt: new Date('2023-01-03'),\n        updatedAt: new Date('2023-01-03')\n      }, {\n        id: '4',\n        name: 'David Kim',\n        email: 'david.kim@cluster2airports.com',\n        password: 'password',\n        image: '',\n        roles: ['author'],\n        isActive: true,\n        createdAt: new Date('2024-04-05'),\n        updatedAt: new Date('2024-04-05')\n      }, {\n        id: '5',\n        name: 'Emma Thompson',\n        email: 'emma.thompson@cluster2airports.com',\n        password: 'password',\n        image: '',\n        roles: ['author'],\n        isActive: true,\n        createdAt: new Date('2024-05-12'),\n        updatedAt: new Date('2024-05-12')\n      }, {\n        id: '6',\n        name: 'Robert Wilson',\n        email: 'robert.wilson@cluster2airports.com',\n        password: 'password',\n        image: '',\n        roles: ['editor'],\n        isActive: false,\n        createdAt: new Date('2024-06-18'),\n        updatedAt: new Date('2024-06-18')\n      }];\n    }\n    generateId() {\n      return Math.random().toString(36).substr(2, 9);\n    }\n    getFiltered(filter) {\n      return this.getAll().pipe(map(users => {\n        let filtered = users;\n        if (filter.searchTerm) {\n          const searchLower = filter.searchTerm.toLowerCase();\n          filtered = filtered.filter(user => user.name.toLowerCase().includes(searchLower) || user.email.toLowerCase().includes(searchLower));\n        }\n        if (filter.role) {\n          filtered = filtered.filter(user => user.roles && Array.isArray(user.roles) && filter.role && user.roles.includes(filter.role));\n        }\n        if (filter.isActive !== undefined) {\n          filtered = filtered.filter(user => user.isActive === filter.isActive);\n        }\n        return filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      }));\n    }\n    getActiveUsersCount() {\n      return this.getAll().pipe(map(users => users.filter(user => user.isActive).length));\n    }\n    getAdminCount() {\n      return this.getAll().pipe(map(users => users.filter(user => user.roles.includes('admin')).length));\n    }\n    getInactiveCount() {\n      return this.getAll().pipe(map(users => users.filter(user => !user.isActive).length));\n    }\n    toggleUserStatus(id) {\n      const currentUsers = this.items$.getValue();\n      const index = currentUsers.findIndex(user => user.id === id);\n      if (index === -1) return of(null);\n      const updatedUser = {\n        ...currentUsers[index],\n        isActive: !currentUsers[index].isActive,\n        updatedAt: new Date()\n      };\n      const newUsers = [...currentUsers];\n      newUsers[index] = updatedUser;\n      this.items$.next(newUsers);\n      return of(updatedUser);\n    }\n    // Observable for loading state\n    get isLoading$() {\n      return this.isLoading();\n    }\n    createUser(user) {\n      const newUser = {\n        ...user,\n        id: this.generateId(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isActive: true\n      };\n      const currentUsers = this.items$.getValue();\n      this.items$.next([...currentUsers, newUser]);\n      return of(newUser);\n    }\n    getAvailableRoles() {\n      // You can make this dynamic if needed\n      return of(['admin', 'editor', 'author', 'viewer']);\n    }\n    deleteUser(id) {\n      const currentUsers = this.items$.getValue();\n      const filteredUsers = currentUsers.filter(user => user.id !== id);\n      if (filteredUsers.length === currentUsers.length) {\n        return of(false);\n      }\n      this.items$.next(filteredUsers);\n      return of(true);\n    }\n    restoreUser(user) {\n      const currentUsers = this.items$.getValue();\n      this.items$.next([user, ...currentUsers]);\n    }\n    static {\n      this.ɵfac = /*@__PURE__*/(() => {\n        let ɵUserService_BaseFactory;\n        return function UserService_Factory(__ngFactoryType__) {\n          return (ɵUserService_BaseFactory || (ɵUserService_BaseFactory = i0.ɵɵgetInheritedFactory(UserService)))(__ngFactoryType__ || UserService);\n        };\n      })();\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}