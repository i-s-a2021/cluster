{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router) {\n      this.router = router;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      const userJson = localStorage.getItem('currentUser');\n      if (userJson) {\n        this.currentUserSubject.next(JSON.parse(userJson));\n      }\n    }\n    login(username, password) {\n      // Mock login: In real app, call API\n      const mockUser = {\n        id: '1',\n        username,\n        roles: username === 'admin' ? ['admin', 'editor'] : ['author']\n      };\n      localStorage.setItem('currentUser', JSON.stringify(mockUser));\n      this.currentUserSubject.next(mockUser);\n      return of(mockUser);\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    isLoggedIn() {\n      return !!this.currentUserSubject.value;\n    }\n    hasRole(role) {\n      const user = this.currentUserSubject.value;\n      return !!user && user.roles.includes(role);\n    }\n    hasAnyRole(roles) {\n      const user = this.currentUserSubject.value;\n      return !!user && roles.some(r => user.roles.includes(r));\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}