{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.isDarkMode$ = new BehaviorSubject(false);\n    this.initializeTheme();\n  }\n  initializeTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const isDark = savedTheme === 'dark' || !savedTheme && prefersDark;\n    this.setTheme(isDark);\n  }\n  isDarkMode() {\n    return this.isDarkMode$.asObservable();\n  }\n  toggleTheme() {\n    const currentTheme = this.isDarkMode$.value;\n    this.setTheme(!currentTheme);\n  }\n  setTheme(isDark) {\n    this.isDarkMode$.next(isDark);\n    document.body.classList.toggle('dark-mode', isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  }\n  static {\n    this.ɵfac = function ThemeService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ThemeService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","ThemeService","constructor","isDarkMode$","initializeTheme","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","isDark","setTheme","isDarkMode","asObservable","toggleTheme","currentTheme","value","next","document","body","classList","toggle","setItem","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\core\\services\\theme.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private isDarkMode$ = new BehaviorSubject<boolean>(false);\n\n  constructor() {\n    this.initializeTheme();\n  }\n\n  private initializeTheme(): void {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    const isDark = savedTheme === 'dark' || (!savedTheme && prefersDark);\n    this.setTheme(isDark);\n  }\n\n  isDarkMode() {\n    return this.isDarkMode$.asObservable();\n  }\n\n  toggleTheme(): void {\n    const currentTheme = this.isDarkMode$.value;\n    this.setTheme(!currentTheme);\n  }\n\n  private setTheme(isDark: boolean): void {\n    this.isDarkMode$.next(isDark);\n    document.body.classList.toggle('dark-mode', isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,YAAY;EAGvBC,YAAA;IAFQ,KAAAC,WAAW,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IAGvD,IAAI,CAACI,eAAe,EAAE;EACxB;EAEQA,eAAeA,CAAA;IACrB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;IAE7E,MAAMC,MAAM,GAAGP,UAAU,KAAK,MAAM,IAAK,CAACA,UAAU,IAAIG,WAAY;IACpE,IAAI,CAACK,QAAQ,CAACD,MAAM,CAAC;EACvB;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACX,WAAW,CAACY,YAAY,EAAE;EACxC;EAEAC,WAAWA,CAAA;IACT,MAAMC,YAAY,GAAG,IAAI,CAACd,WAAW,CAACe,KAAK;IAC3C,IAAI,CAACL,QAAQ,CAAC,CAACI,YAAY,CAAC;EAC9B;EAEQJ,QAAQA,CAACD,MAAe;IAC9B,IAAI,CAACT,WAAW,CAACgB,IAAI,CAACP,MAAM,CAAC;IAC7BQ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEX,MAAM,CAAC;IACnDN,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEZ,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;EAC1D;;;uCA5BWX,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAwB,OAAA,EAAZxB,YAAY,CAAAyB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}