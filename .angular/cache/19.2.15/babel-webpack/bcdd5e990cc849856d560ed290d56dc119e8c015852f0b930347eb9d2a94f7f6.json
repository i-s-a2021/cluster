{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const userJson = localStorage.getItem('currentUser');\n    if (userJson) {\n      this.currentUserSubject.next(JSON.parse(userJson));\n    }\n  }\n  login(username, password) {\n    // Mock login: In real app, call API\n    const mockUser = {\n      id: '1',\n      username,\n      roles: username === 'admin' ? ['admin', 'editor'] : ['author']\n    };\n    localStorage.setItem('currentUser', JSON.stringify(mockUser));\n    this.currentUserSubject.next(mockUser);\n    return of(mockUser);\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isLoggedIn() {\n    return !!this.currentUserSubject.value;\n  }\n  hasRole(role) {\n    const user = this.currentUserSubject.value;\n    return !!user && user.roles.includes(role);\n  }\n  hasAnyRole(roles) {\n    const user = this.currentUserSubject.value;\n    return !!user && roles.some(r => user.roles.includes(r));\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","AuthService","constructor","router","currentUserSubject","currentUser$","asObservable","userJson","localStorage","getItem","next","JSON","parse","login","username","password","mockUser","id","roles","setItem","stringify","logout","removeItem","navigate","getCurrentUser","value","isLoggedIn","hasRole","role","user","includes","hasAnyRole","some","r","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  roles: string[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private router: Router) {\r\n    const userJson = localStorage.getItem('currentUser');\r\n    if (userJson) {\r\n      this.currentUserSubject.next(JSON.parse(userJson));\r\n    }\r\n  }\r\n\r\n  login(username: string, password: string): Observable<User> {\r\n    // Mock login: In real app, call API\r\n    const mockUser: User = {\r\n      id: '1',\r\n      username,\r\n      roles: username === 'admin' ? ['admin', 'editor'] : ['author']\r\n    };\r\n    localStorage.setItem('currentUser', JSON.stringify(mockUser));\r\n    this.currentUserSubject.next(mockUser);\r\n    return of(mockUser);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.currentUserSubject.value;\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    return !!user && user.roles.includes(role);\r\n  }\r\n\r\n  hasAnyRole(roles: string[]): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    return !!user && roles.some(r => user.roles.includes(r));\r\n  }\r\n} "],"mappings":"AAEA,SAASA,eAAe,EAAcC,EAAE,QAAQ,MAAM;;;AAStD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAHlB,KAAAC,kBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAM,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACpD,IAAIF,QAAQ,EAAE;MACZ,IAAI,CAACH,kBAAkB,CAACM,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,CAAC;IACpD;EACF;EAEAM,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,MAAMC,QAAQ,GAAS;MACrBC,EAAE,EAAE,GAAG;MACPH,QAAQ;MACRI,KAAK,EAAEJ,QAAQ,KAAK,OAAO,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ;KAC9D;IACDN,YAAY,CAACW,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACJ,QAAQ,CAAC,CAAC;IAC7D,IAAI,CAACZ,kBAAkB,CAACM,IAAI,CAACM,QAAQ,CAAC;IACtC,OAAOhB,EAAE,CAACgB,QAAQ,CAAC;EACrB;EAEAK,MAAMA,CAAA;IACJb,YAAY,CAACc,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAAClB,kBAAkB,CAACM,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACP,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACpB,kBAAkB,CAACqB,KAAK;EACtC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACtB,kBAAkB,CAACqB,KAAK;EACxC;EAEAE,OAAOA,CAACC,IAAY;IAClB,MAAMC,IAAI,GAAG,IAAI,CAACzB,kBAAkB,CAACqB,KAAK;IAC1C,OAAO,CAAC,CAACI,IAAI,IAAIA,IAAI,CAACX,KAAK,CAACY,QAAQ,CAACF,IAAI,CAAC;EAC5C;EAEAG,UAAUA,CAACb,KAAe;IACxB,MAAMW,IAAI,GAAG,IAAI,CAACzB,kBAAkB,CAACqB,KAAK;IAC1C,OAAO,CAAC,CAACI,IAAI,IAAIX,KAAK,CAACc,IAAI,CAACC,CAAC,IAAIJ,IAAI,CAACX,KAAK,CAACY,QAAQ,CAACG,CAAC,CAAC,CAAC;EAC1D;;;uCA7CWhC,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXpC,WAAW;MAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}