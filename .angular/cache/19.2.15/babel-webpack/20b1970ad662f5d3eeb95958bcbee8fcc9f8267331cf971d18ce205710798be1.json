{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let BaseService = /*#__PURE__*/(() => {\n  class BaseService {\n    constructor() {\n      this.items$ = new BehaviorSubject([]);\n      this.loading$ = new BehaviorSubject(false);\n      this.loadInitialData();\n    }\n    loadInitialData() {\n      this.loading$.next(true);\n      setTimeout(() => {\n        this.items$.next(this.getInitialData());\n        this.loading$.next(false);\n      }, 500);\n    }\n    getAll() {\n      return this.items$.asObservable();\n    }\n    getById(id) {\n      return this.items$.pipe(map(items => items.find(item => item.id === id)));\n    }\n    create(item) {\n      const newItem = {\n        ...item,\n        id: this.generateId(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      const currentItems = this.items$.getValue();\n      this.items$.next([...currentItems, newItem]);\n      return of(newItem).pipe(delay(200));\n    }\n    update(id, updates) {\n      const currentItems = this.items$.getValue();\n      const index = currentItems.findIndex(item => item.id === id);\n      if (index === -1) {\n        return of(null);\n      }\n      const updatedItem = {\n        ...currentItems[index],\n        ...updates,\n        updatedAt: new Date()\n      };\n      const newItems = [...currentItems];\n      newItems[index] = updatedItem;\n      this.items$.next(newItems);\n      return of(updatedItem).pipe(delay(200));\n    }\n    delete(id) {\n      const currentItems = this.items$.getValue();\n      const filteredItems = currentItems.filter(item => item.id !== id);\n      if (filteredItems.length === currentItems.length) {\n        return of(false);\n      }\n      this.items$.next(filteredItems);\n      return of(true).pipe(delay(200));\n    }\n    isLoading() {\n      return this.loading$.asObservable();\n    }\n    static {\n      this.ɵfac = function BaseService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || BaseService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: BaseService,\n        factory: BaseService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}