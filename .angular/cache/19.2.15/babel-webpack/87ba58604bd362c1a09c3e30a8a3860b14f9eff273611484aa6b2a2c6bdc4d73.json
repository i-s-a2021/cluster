{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class BaseService {\n  constructor() {\n    this.items$ = new BehaviorSubject([]);\n    this.loading$ = new BehaviorSubject(false);\n    this.loadInitialData();\n  }\n  loadInitialData() {\n    this.loading$.next(true);\n    setTimeout(() => {\n      this.items$.next(this.getInitialData());\n      this.loading$.next(false);\n    }, 500);\n  }\n  getAll() {\n    return this.items$.asObservable();\n  }\n  getById(id) {\n    return this.items$.pipe(map(items => items.find(item => item.id === id)));\n  }\n  create(item) {\n    const newItem = {\n      ...item,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    const currentItems = this.items$.getValue();\n    this.items$.next([...currentItems, newItem]);\n    return of(newItem).pipe(delay(200));\n  }\n  update(id, updates) {\n    const currentItems = this.items$.getValue();\n    const index = currentItems.findIndex(item => item.id === id);\n    if (index === -1) {\n      return of(null);\n    }\n    const updatedItem = {\n      ...currentItems[index],\n      ...updates,\n      updatedAt: new Date()\n    };\n    const newItems = [...currentItems];\n    newItems[index] = updatedItem;\n    this.items$.next(newItems);\n    return of(updatedItem).pipe(delay(200));\n  }\n  delete(id) {\n    const currentItems = this.items$.getValue();\n    const filteredItems = currentItems.filter(item => item.id !== id);\n    if (filteredItems.length === currentItems.length) {\n      return of(false);\n    }\n    this.items$.next(filteredItems);\n    return of(true).pipe(delay(200));\n  }\n  isLoading() {\n    return this.loading$.asObservable();\n  }\n  static {\n    this.ɵfac = function BaseService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BaseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BaseService,\n      factory: BaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","delay","map","BaseService","constructor","items$","loading$","loadInitialData","next","setTimeout","getInitialData","getAll","asObservable","getById","id","pipe","items","find","item","create","newItem","generateId","createdAt","Date","updatedAt","currentItems","getValue","update","updates","index","findIndex","updatedItem","newItems","delete","filteredItems","filter","length","isLoading","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\core\\services\\base.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class BaseService<T> {\n  protected items$ = new BehaviorSubject<T[]>([]);\n  protected loading$ = new BehaviorSubject<boolean>(false);\n\n  constructor() {\n    this.loadInitialData();\n  }\n\n  protected abstract getInitialData(): T[];\n  protected abstract generateId(): string;\n\n  private loadInitialData(): void {\n    this.loading$.next(true);\n    setTimeout(() => {\n      this.items$.next(this.getInitialData());\n      this.loading$.next(false);\n    }, 500);\n  }\n\n  getAll(): Observable<T[]> {\n    return this.items$.asObservable();\n  }\n\n  getById(id: string): Observable<T | undefined> {\n    return this.items$.pipe(\n      map(items => items.find((item: any) => item.id === id))\n    );\n  }\n\n  create(item: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Observable<T> {\n    const newItem = {\n      ...item,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    } as T;\n\n    const currentItems = this.items$.getValue();\n    this.items$.next([...currentItems, newItem]);\n\n    return of(newItem).pipe(delay(200));\n  }\n\n  update(id: string, updates: Partial<T>): Observable<T | null> {\n    const currentItems = this.items$.getValue();\n    const index = currentItems.findIndex((item: any) => item.id === id);\n    \n    if (index === -1) {\n      return of(null);\n    }\n\n    const updatedItem = {\n      ...currentItems[index],\n      ...updates,\n      updatedAt: new Date()\n    } as T;\n\n    const newItems = [...currentItems];\n    newItems[index] = updatedItem;\n    this.items$.next(newItems);\n\n    return of(updatedItem).pipe(delay(200));\n  }\n\n  delete(id: string): Observable<boolean> {\n    const currentItems = this.items$.getValue();\n    const filteredItems = currentItems.filter((item: any) => item.id !== id);\n    \n    if (filteredItems.length === currentItems.length) {\n      return of(false);\n    }\n\n    this.items$.next(filteredItems);\n    return of(true).pipe(delay(200));\n  }\n\n  isLoading(): Observable<boolean> {\n    return this.loading$.asObservable();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}