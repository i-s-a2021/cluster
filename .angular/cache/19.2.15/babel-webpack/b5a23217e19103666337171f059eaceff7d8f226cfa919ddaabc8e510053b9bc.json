{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseService } from './base.service';\nimport * as i0 from \"@angular/core\";\nexport class UserService extends BaseService {\n  getInitialData() {\n    return [{\n      id: '1',\n      name: 'Alice Smith',\n      email: 'alice@example.com',\n      password: 'password',\n      image: '',\n      roles: ['admin'],\n      isActive: true,\n      createdAt: new Date('2023-01-01'),\n      updatedAt: new Date('2023-01-01')\n    }, {\n      id: '2',\n      name: 'Bob Johnson',\n      email: 'bob@example.com',\n      password: 'password',\n      image: '',\n      roles: ['editor'],\n      isActive: true,\n      createdAt: new Date('2023-01-02'),\n      updatedAt: new Date('2023-01-02')\n    }, {\n      id: '3',\n      name: 'Carol Lee',\n      email: 'carol@example.com',\n      password: 'password',\n      image: '',\n      roles: ['author'],\n      isActive: false,\n      createdAt: new Date('2023-01-03'),\n      updatedAt: new Date('2023-01-03')\n    }, {\n      id: '4',\n      name: 'David Kim',\n      email: 'david.kim@cluster2airports.com',\n      password: 'password',\n      image: '',\n      roles: ['author'],\n      isActive: true,\n      createdAt: new Date('2024-04-05'),\n      updatedAt: new Date('2024-04-05')\n    }, {\n      id: '5',\n      name: 'Emma Thompson',\n      email: 'emma.thompson@cluster2airports.com',\n      password: 'password',\n      image: '',\n      roles: ['author'],\n      isActive: true,\n      createdAt: new Date('2024-05-12'),\n      updatedAt: new Date('2024-05-12')\n    }, {\n      id: '6',\n      name: 'Robert Wilson',\n      email: 'robert.wilson@cluster2airports.com',\n      password: 'password',\n      image: '',\n      roles: ['editor'],\n      isActive: false,\n      createdAt: new Date('2024-06-18'),\n      updatedAt: new Date('2024-06-18')\n    }];\n  }\n  generateId() {\n    return Math.random().toString(36).substr(2, 9);\n  }\n  getFiltered(filter) {\n    return this.getAll().pipe(map(users => {\n      let filtered = users;\n      if (filter.searchTerm) {\n        const searchLower = filter.searchTerm.toLowerCase();\n        filtered = filtered.filter(user => user.name.toLowerCase().includes(searchLower) || user.email.toLowerCase().includes(searchLower));\n      }\n      if (filter.role) {\n        filtered = filtered.filter(user => user.roles && Array.isArray(user.roles) && filter.role && user.roles.includes(filter.role));\n      }\n      if (filter.isActive !== undefined) {\n        filtered = filtered.filter(user => user.isActive === filter.isActive);\n      }\n      return filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }));\n  }\n  getActiveUsersCount() {\n    return this.getAll().pipe(map(users => users.filter(user => user.isActive).length));\n  }\n  getAdminCount() {\n    return this.getAll().pipe(map(users => users.filter(user => user.roles.includes('admin')).length));\n  }\n  getInactiveCount() {\n    return this.getAll().pipe(map(users => users.filter(user => !user.isActive).length));\n  }\n  toggleUserStatus(id) {\n    const currentUsers = this.items$.getValue();\n    const index = currentUsers.findIndex(user => user.id === id);\n    if (index === -1) return of(null);\n    const updatedUser = {\n      ...currentUsers[index],\n      isActive: !currentUsers[index].isActive,\n      updatedAt: new Date()\n    };\n    const newUsers = [...currentUsers];\n    newUsers[index] = updatedUser;\n    this.items$.next(newUsers);\n    return of(updatedUser);\n  }\n  // Observable for loading state\n  get isLoading$() {\n    return this.isLoading();\n  }\n  createUser(user) {\n    const newUser = {\n      ...user,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isActive: true\n    };\n    const currentUsers = this.items$.getValue();\n    this.items$.next([...currentUsers, newUser]);\n    return of(newUser);\n  }\n  getAvailableRoles() {\n    // You can make this dynamic if needed\n    return of(['admin', 'editor', 'author', 'viewer']);\n  }\n  deleteUser(id) {\n    const currentUsers = this.items$.getValue();\n    const filteredUsers = currentUsers.filter(user => user.id !== id);\n    if (filteredUsers.length === currentUsers.length) {\n      return of(false);\n    }\n    this.items$.next(filteredUsers);\n    return of(true);\n  }\n  restoreUser(user) {\n    const currentUsers = this.items$.getValue();\n    this.items$.next([user, ...currentUsers]);\n  }\n  static {\n    this.ɵfac = /*@__PURE__*/(() => {\n      let ɵUserService_BaseFactory;\n      return function UserService_Factory(__ngFactoryType__) {\n        return (ɵUserService_BaseFactory || (ɵUserService_BaseFactory = i0.ɵɵgetInheritedFactory(UserService)))(__ngFactoryType__ || UserService);\n      };\n    })();\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","map","BaseService","UserService","getInitialData","id","name","email","password","image","roles","isActive","createdAt","Date","updatedAt","generateId","Math","random","toString","substr","getFiltered","filter","getAll","pipe","users","filtered","searchTerm","searchLower","toLowerCase","user","includes","role","Array","isArray","undefined","sort","a","b","getTime","getActiveUsersCount","length","getAdminCount","getInactiveCount","toggleUserStatus","currentUsers","items$","getValue","index","findIndex","updatedUser","newUsers","next","isLoading$","isLoading","createUser","newUser","getAvailableRoles","deleteUser","filteredUsers","restoreUser","__ngFactoryType__","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BaseService } from './base.service';\nimport { User, UserFilter } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService extends BaseService<User> {\n  \n  protected getInitialData(): User[] {\n    return [\n      {\n        id: '1',\n        name: 'Alice Smith',\n        email: 'alice@example.com',\n        password: 'password',\n        image: '',\n        roles: ['admin'],\n        isActive: true,\n        createdAt: new Date('2023-01-01'),\n        updatedAt: new Date('2023-01-01')\n      },\n      {\n        id: '2',\n        name: 'Bob Johnson',\n        email: 'bob@example.com',\n        password: 'password',\n        image: '',\n        roles: ['editor'],\n        isActive: true,\n        createdAt: new Date('2023-01-02'),\n        updatedAt: new Date('2023-01-02')\n      },\n      {\n        id: '3',\n        name: 'Carol Lee',\n        email: 'carol@example.com',\n        password: 'password',\n        image: '',\n        roles: ['author'],\n        isActive: false,\n        createdAt: new Date('2023-01-03'),\n        updatedAt: new Date('2023-01-03')\n      },\n      {\n        id: '4',\n        name: 'David Kim',\n        email: 'david.kim@cluster2airports.com',\n        password: 'password',\n        image: '',\n        roles: ['author'],\n        isActive: true,\n        createdAt: new Date('2024-04-05'),\n        updatedAt: new Date('2024-04-05')\n      },\n      {\n        id: '5',\n        name: 'Emma Thompson',\n        email: 'emma.thompson@cluster2airports.com',\n        password: 'password',\n        image: '',\n        roles: ['author'],\n        isActive: true,\n        createdAt: new Date('2024-05-12'),\n        updatedAt: new Date('2024-05-12')\n      },\n      {\n        id: '6',\n        name: 'Robert Wilson',\n        email: 'robert.wilson@cluster2airports.com',\n        password: 'password',\n        image: '',\n        roles: ['editor'],\n        isActive: false,\n        createdAt: new Date('2024-06-18'),\n        updatedAt: new Date('2024-06-18')\n      }\n    ];\n  }\n\n  protected generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  getFiltered(filter: UserFilter): Observable<User[]> {\n    return this.getAll().pipe(\n      map(users => {\n        let filtered = users;\n\n        if (filter.searchTerm) {\n          const searchLower = filter.searchTerm.toLowerCase();\n          filtered = filtered.filter(user => \n            user.name.toLowerCase().includes(searchLower) ||\n            user.email.toLowerCase().includes(searchLower)\n          );\n        }\n\n        if (filter.role) {\n          filtered = filtered.filter(user => user.roles && Array.isArray(user.roles) && filter.role && user.roles.includes(filter.role));\n        }\n\n        if (filter.isActive !== undefined) {\n          filtered = filtered.filter(user => user.isActive === filter.isActive);\n        }\n\n        return filtered.sort((a, b) => \n          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n        );\n      })\n    );\n  }\n\n  getActiveUsersCount(): Observable<number> {\n    return this.getAll().pipe(\n      map(users => users.filter(user => user.isActive).length)\n    );\n  }\n\n  getAdminCount(): Observable<number> {\n    return this.getAll().pipe(\n      map(users => users.filter(user => user.roles.includes('admin')).length)\n    );\n  }\n\n  getInactiveCount(): Observable<number> {\n    return this.getAll().pipe(\n      map(users => users.filter(user => !user.isActive).length)\n    );\n  }\n\n  toggleUserStatus(id: string): Observable<User | null> {\n    const currentUsers = this.items$.getValue();\n    const index = currentUsers.findIndex(user => user.id === id);\n    if (index === -1) return of(null);\n    const updatedUser = {\n      ...currentUsers[index],\n      isActive: !currentUsers[index].isActive,\n      updatedAt: new Date()\n    };\n    const newUsers = [...currentUsers];\n    newUsers[index] = updatedUser;\n    this.items$.next(newUsers);\n    return of(updatedUser);\n  }\n\n  // Observable for loading state\n  get isLoading$(): Observable<boolean> {\n    return this.isLoading();\n  }\n\n  createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Observable<User> {\n    const newUser: User = {\n      ...user,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isActive: true\n    };\n    const currentUsers = this.items$.getValue();\n    this.items$.next([...currentUsers, newUser]);\n    return of(newUser);\n  }\n\n  getAvailableRoles(): Observable<string[]> {\n    // You can make this dynamic if needed\n    return of(['admin', 'editor', 'author', 'viewer']);\n  }\n\n  deleteUser(id: string): Observable<boolean> {\n    const currentUsers = this.items$.getValue();\n    const filteredUsers = currentUsers.filter(user => user.id !== id);\n    if (filteredUsers.length === currentUsers.length) {\n      return of(false);\n    }\n    this.items$.next(filteredUsers);\n    return of(true);\n  }\n\n  restoreUser(user: User): void {\n    const currentUsers = this.items$.getValue();\n    this.items$.next([user, ...currentUsers]);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}