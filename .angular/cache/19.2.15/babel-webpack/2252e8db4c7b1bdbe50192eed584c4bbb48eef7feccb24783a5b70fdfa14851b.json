{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { map, debounceTime, first } from 'rxjs/operators';\nfunction strongPasswordValidator(control) {\n  const value = control.value || '';\n  if (!value) return null;\n  const hasNumber = /[0-9]/.test(value);\n  const hasLetter = /[a-zA-Z]/.test(value);\n  return value.length >= 8 && hasNumber && hasLetter ? null : {\n    strongPassword: true\n  };\n}\nfunction uniqueEmailValidator(userService, currentUserId) {\n  return control => {\n    const email = control.value;\n    if (!email) return of(null);\n    return userService.getAll().pipe(debounceTime(300), map(users => {\n      const found = users.find(u => u.email === email && u.id !== currentUserId);\n      return found ? {\n        uniqueEmail: true\n      } : null;\n    }), first());\n  };\n}\nlet UserFormComponent = class UserFormComponent {\n  constructor(fb, userService) {\n    this.fb = fb;\n    this.userService = userService;\n    this.user = null;\n    this.mode = 'add';\n    this.availableRoles$ = new Observable();\n    this.submitUser = new EventEmitter();\n    this.cancel = new EventEmitter();\n    this.imagePreview = null;\n    this.loading = false;\n    this.userForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [uniqueEmailValidator(this.userService)],\n        updateOn: 'blur'\n      }],\n      password: ['', [Validators.required, Validators.minLength(8), strongPasswordValidator]],\n      roles: [[], Validators.required],\n      image: ['']\n    });\n  }\n  ngOnInit() {\n    if (this.user) {\n      this.userForm.patchValue({\n        name: this.user.name,\n        email: this.user.email,\n        roles: this.user.roles,\n        image: this.user.image || ''\n      });\n      this.imagePreview = this.user.image || null;\n      if (this.mode === 'edit') {\n        this.userForm.get('password')?.clearValidators();\n        this.userForm.get('password')?.updateValueAndValidity();\n        // Set unique email validator to ignore current user\n        this.userForm.get('email')?.setAsyncValidators([uniqueEmailValidator(this.userService, this.user.id)]);\n      }\n    }\n  }\n  onFileChange(event) {\n    const input = event.target;\n    if (input.files && input.files.length) {\n      const file = input.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n        this.userForm.patchValue({\n          image: this.imagePreview\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  onSubmit() {\n    if (this.userForm.invalid) return;\n    this.submitUser.emit(this.userForm.value);\n  }\n};\n__decorate([Input()], UserFormComponent.prototype, \"user\", void 0);\n__decorate([Input()], UserFormComponent.prototype, \"mode\", void 0);\n__decorate([Input()], UserFormComponent.prototype, \"availableRoles$\", void 0);\n__decorate([Output()], UserFormComponent.prototype, \"submitUser\", void 0);\n__decorate([Output()], UserFormComponent.prototype, \"cancel\", void 0);\nUserFormComponent = __decorate([Component({\n  selector: 'app-user-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})], UserFormComponent);\nexport { UserFormComponent };","map":{"version":3,"names":["Component","Input","Output","EventEmitter","CommonModule","Validators","ReactiveFormsModule","Observable","of","map","debounceTime","first","strongPasswordValidator","control","value","hasNumber","test","hasLetter","length","strongPassword","uniqueEmailValidator","userService","currentUserId","email","getAll","pipe","users","found","find","u","id","uniqueEmail","UserFormComponent","constructor","fb","user","mode","availableRoles$","submitUser","cancel","imagePreview","loading","userForm","group","name","required","validators","asyncValidators","updateOn","password","minLength","roles","image","ngOnInit","patchValue","get","clearValidators","updateValueAndValidity","setAsyncValidators","onFileChange","event","input","target","files","file","reader","FileReader","onload","result","readAsDataURL","onSubmit","invalid","emit","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\features\\users\\user-form.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, AbstractControl, ValidationErrors, AsyncValidatorFn } from '@angular/forms';\r\nimport { User } from '../../core/models/user.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, debounceTime, switchMap, first } from 'rxjs/operators';\r\nimport { UserService } from '../../core/services/user.service';\r\n\r\nfunction strongPasswordValidator(control: AbstractControl): ValidationErrors | null {\r\n  const value = control.value || '';\r\n  if (!value) return null;\r\n  const hasNumber = /[0-9]/.test(value);\r\n  const hasLetter = /[a-zA-Z]/.test(value);\r\n  return value.length >= 8 && hasNumber && hasLetter ? null : { strongPassword: true };\r\n}\r\n\r\nfunction uniqueEmailValidator(userService: UserService, currentUserId?: string): AsyncValidatorFn {\r\n  return (control: AbstractControl) => {\r\n    const email = control.value;\r\n    if (!email) return of(null);\r\n    return userService.getAll().pipe(\r\n      debounceTime(300),\r\n      map(users => {\r\n        const found = users.find(u => u.email === email && u.id !== currentUserId);\r\n        return found ? { uniqueEmail: true } : null;\r\n      }),\r\n      first()\r\n    );\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-user-form',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './user-form.component.html',\r\n  styleUrls: ['./user-form.component.scss']\r\n})\r\nexport class UserFormComponent implements OnInit {\r\n  @Input() user: User | null = null;\r\n  @Input() mode: 'add' | 'edit' = 'add';\r\n  @Input() availableRoles$: Observable<string[]> = new Observable();\r\n  @Output() submitUser = new EventEmitter<any>();\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  userForm: FormGroup;\r\n  imagePreview: string | null = null;\r\n  loading = false;\r\n\r\n  constructor(private fb: FormBuilder, private userService: UserService) {\r\n    this.userForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', {\r\n        validators: [Validators.required, Validators.email],\r\n        asyncValidators: [uniqueEmailValidator(this.userService)],\r\n        updateOn: 'blur'\r\n      }],\r\n      password: ['', [Validators.required, Validators.minLength(8), strongPasswordValidator]],\r\n      roles: [[], Validators.required],\r\n      image: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.user) {\r\n      this.userForm.patchValue({\r\n        name: this.user.name,\r\n        email: this.user.email,\r\n        roles: this.user.roles,\r\n        image: this.user.image || ''\r\n      });\r\n      this.imagePreview = this.user.image || null;\r\n      if (this.mode === 'edit') {\r\n        this.userForm.get('password')?.clearValidators();\r\n        this.userForm.get('password')?.updateValueAndValidity();\r\n        // Set unique email validator to ignore current user\r\n        this.userForm.get('email')?.setAsyncValidators([uniqueEmailValidator(this.userService, this.user.id)]);\r\n      }\r\n    }\r\n  }\r\n\r\n  onFileChange(event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files && input.files.length) {\r\n      const file = input.files[0];\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        this.imagePreview = reader.result as string;\r\n        this.userForm.patchValue({ image: this.imagePreview });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.userForm.invalid) return;\r\n    this.submitUser.emit(this.userForm.value);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}