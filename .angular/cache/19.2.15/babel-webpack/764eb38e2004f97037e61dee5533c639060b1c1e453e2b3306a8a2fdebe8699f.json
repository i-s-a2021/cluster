{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { LoadingComponent } from '../../../shared/components/loading/loading.component';\nlet NewsFormComponent = class NewsFormComponent {\n  constructor(fb, newsService, route, router) {\n    this.fb = fb;\n    this.newsService = newsService;\n    this.route = route;\n    this.router = router;\n    this.isLoading$ = new Observable();\n    this.isEditMode = false;\n    this.availableTags$ = new Observable();\n    this.isSubmitting = false;\n    this.newsForm = this.fb.group({\n      title: ['', Validators.required],\n      summary: ['', Validators.required],\n      content: ['', Validators.required],\n      author: ['', Validators.required],\n      publishDate: ['', Validators.required],\n      tagsInput: [''],\n      isArchived: [false]\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.isEditMode = true;\n        this.isLoading$ = this.newsService.isLoading$;\n        this.newsService.getById(id).subscribe(news => {\n          if (news) {\n            this.newsForm.patchValue({\n              title: news.title,\n              summary: news.summary,\n              content: news.content,\n              author: news.author,\n              publishDate: this.formatDate(news.publishDate),\n              tagsInput: news.tags.join(', '),\n              isArchived: news.isArchived\n            });\n          } else {\n            this.router.navigate(['/news']);\n          }\n        });\n      } else {\n        this.isEditMode = false;\n      }\n    });\n  }\n  formatDate(date) {\n    const d = new Date(date);\n    return d.toISOString().substring(0, 10);\n  }\n  onSubmit() {\n    this.isSubmitting = true;\n    const formValue = this.newsForm.value;\n    const newsData = {\n      title: formValue.title,\n      summary: formValue.summary,\n      content: formValue.content,\n      author: formValue.author,\n      publishDate: new Date(formValue.publishDate),\n      tags: formValue.tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag),\n      isArchived: formValue.isArchived\n    };\n    if (this.isEditMode) {\n      this.route.paramMap.subscribe(params => {\n        const id = params.get('id');\n        if (id) {\n          this.newsService.update(id, newsData).subscribe(() => {\n            this.isSubmitting = false;\n            this.router.navigate(['/news']);\n          });\n        }\n      });\n    } else {\n      const createData = {\n        title: formValue.title || '',\n        summary: formValue.summary || '',\n        content: formValue.content || '',\n        author: formValue.author || '',\n        publishDate: new Date(formValue.publishDate),\n        tags: formValue.tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag),\n        isArchived: formValue.isArchived\n      };\n      this.newsService.create(createData).subscribe(() => {\n        this.isSubmitting = false;\n        this.router.navigate(['/news']);\n      });\n    }\n  }\n  addTag(tag) {\n    // Implement add tag logic\n  }\n};\nNewsFormComponent = __decorate([Component({\n  selector: 'app-news-form',\n  standalone: true,\n  imports: [CommonModule, RouterModule, ReactiveFormsModule, LoadingComponent],\n  templateUrl: './news-form.component.html'\n})], NewsFormComponent);\nexport { NewsFormComponent };","map":{"version":3,"names":["Component","CommonModule","RouterModule","ReactiveFormsModule","Validators","Observable","LoadingComponent","NewsFormComponent","constructor","fb","newsService","route","router","isLoading$","isEditMode","availableTags$","isSubmitting","newsForm","group","title","required","summary","content","author","publishDate","tagsInput","isArchived","ngOnInit","paramMap","subscribe","params","id","get","getById","news","patchValue","formatDate","tags","join","navigate","date","d","Date","toISOString","substring","onSubmit","formValue","value","newsData","split","map","tag","trim","filter","update","createData","create","addTag","__decorate","selector","standalone","imports","templateUrl"],"sources":["C:\\Users\\ibrahim\\Desktop\\projectPort-new\\src\\app\\features\\news\\news-form\\news-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, ActivatedRoute, Router } from '@angular/router';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, switchMap } from 'rxjs';\n\nimport { NewsService } from '../../../core/services/news.service';\nimport { News } from '../../../core/models/news.model';\nimport { LoadingComponent } from '../../../shared/components/loading/loading.component';\n\n@Component({\n  selector: 'app-news-form',\n  standalone: true,\n  imports: [CommonModule, RouterModule, ReactiveFormsModule, LoadingComponent],\n  templateUrl: './news-form.component.html',\n})\nexport class NewsFormComponent implements OnInit {\n  isLoading$: Observable<boolean> = new Observable();\n  isEditMode = false;\n  newsForm: FormGroup;\n  availableTags$: Observable<string[]> = new Observable();\n  isSubmitting = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private newsService: NewsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    this.newsForm = this.fb.group({\n      title: ['', Validators.required],\n      summary: ['', Validators.required],\n      content: ['', Validators.required],\n      author: ['', Validators.required],\n      publishDate: ['', Validators.required],\n      tagsInput: [''],\n      isArchived: [false]\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.isEditMode = true;\n        this.isLoading$ = this.newsService.isLoading$;\n        this.newsService.getById(id).subscribe(news => {\n          if (news) {\n            this.newsForm.patchValue({\n              title: news.title,\n              summary: news.summary,\n              content: news.content,\n              author: news.author,\n              publishDate: this.formatDate(news.publishDate),\n              tagsInput: news.tags.join(', '),\n              isArchived: news.isArchived\n            });\n          } else {\n            this.router.navigate(['/news']);\n          }\n        });\n      } else {\n        this.isEditMode = false;\n      }\n    });\n  }\n\n  private formatDate(date: Date | string): string {\n    const d = new Date(date);\n    return d.toISOString().substring(0, 10);\n  }\n\n  onSubmit() {\n    this.isSubmitting = true;\n    const formValue = this.newsForm.value;\n    const newsData: Partial<News> = {\n      title: formValue.title,\n      summary: formValue.summary,\n      content: formValue.content,\n      author: formValue.author,\n      publishDate: new Date(formValue.publishDate),\n      tags: formValue.tagsInput.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag),\n      isArchived: formValue.isArchived\n    };\n\n    if (this.isEditMode) {\n      this.route.paramMap.subscribe(params => {\n        const id = params.get('id');\n        if (id) {\n          this.newsService.update(id, newsData).subscribe(() => {\n            this.isSubmitting = false;\n            this.router.navigate(['/news']);\n          });\n        }\n      });\n    } else {\n      const createData = {\n        title: formValue.title || '',\n        summary: formValue.summary || '',\n        content: formValue.content || '',\n        author: formValue.author || '',\n        publishDate: new Date(formValue.publishDate),\n        tags: formValue.tagsInput.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag),\n        isArchived: formValue.isArchived\n      };\n      this.newsService.create(createData).subscribe(() => {\n        this.isSubmitting = false;\n        this.router.navigate(['/news']);\n      });\n    }\n  }\n\n  addTag(tag: string) {\n    // Implement add tag logic\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}